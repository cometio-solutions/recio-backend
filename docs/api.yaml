swagger: "2.0"
info:
  title: RECIO API
  version: 1.0.0
host: 127.0.0.1:5000
tags:
- name: user
  description: Operations about user
- name: file
  description: Operations connected with files
- name: recruitment
  descriptions: Operations connected with recruitments
schemes:
  - http
securityDefinitions:
  JWT:
    type: apiKey
    in: header
    name: token
paths:
  /user:
    post:
      tags:
      - user
      summary: Enables user to create account in our system
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
      - in: body
        name: body
        description: User data that is needed to create user account in our system
        required: true
        schema:
          $ref: '#/definitions/CreateUserData'
      responses:
        200:
          description: user account created
        400:
          description: invalid data supplied (at least one item in response)
          schema:
            $ref: '#/definitions/Error'
        409:
          description: given email is already taken
          schema:
            $ref: '#/definitions/Error'
  /user/auth:
    post:
      tags:
      - user
      summary: Logs user into the system
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
      - in: body
        name: body
        description: Data that is needed to authenticate user
        required: true
        schema:
          $ref: '#/definitions/LoginUserData'
      responses:
        200:
          description: authenticated
          schema:
            $ref: '#/definitions/LoginOutput'
        400:
          description: invalid email or password
          schema:
            $ref: '#/definitions/Error'
  /user/editorRequests:
    get:
      tags:
      - user
      summary: Returns editor requests made by users. Available only for admin. Needs 'token' field in headers.
      consumes:
        - application/json
      produces:
        - application/json
      responses:
        200:
          description: editor requests fetched
          schema:
            type: array
            items:
              $ref: '#/definitions/EditorRequest'
        401:
          description: user is unauthenticated
          schema:
            $ref: '#/definitions/TokenError'
        403:
          description: only admin have access to that
          schema:
            $ref: '#/definitions/Error'
      security:
        - JWT: []
    post:
      tags:
        - user
      summary: If approval is 'accept' changes role from 'user' to 'editor'.
        If approval is 'reject' simply removes the EditorRequest of the user from DB.
        Needs 'token' field in headers.
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: body
          description: Data that is needed to authenticate user
          required: true
          schema:
            $ref: '#/definitions/HandleEditorRequest'
      responses:
        200:
          description: Role changed to editor
        401:
          description: user is unauthenticated
          schema:
            $ref: '#/definitions/TokenError'
        403:
          description: only admin have access to that
          schema:
            $ref: '#/definitions/Error'
        409:
          description: invalid user information or approval status
          schema:
            $ref: '#/definitions/Error'
      security:
          - JWT: []
  /recruitment:
    get:
      tags:
        - recruitment
      summary: Returns all recruitments available in application.
      consumes:
        - application/json
      produces:
        - application/json
      responses:
        200:
          description: <h3> Collects all available recruitment data from database </h4>
          schema:
            $ref: '#/definitions/GetAllRecruitmentData'
        401:
          description: user is unauthenticated
          schema:
            $ref: '#/definitions/TokenError'
      security:
        - JWT: []
  /point-limit:
    post:
      tags:
        - recruitment
      summary: Calculates point limit for every recruitment that has ended
      consumes:
        - application/json
      produces:
        - application/json
      responses:
        200:
          description: Point limits successufully calculated
          schema:
            $ref: '#/definitions/Success'
        401:
          description: user is unauthenticated
          schema:
            $ref: '#/definitions/TokenError'
        400:
          description: error during calculating point limits
          schema:
            $ref: '#/definitions/Error'
      security:
          - JWT: []
  /point-limit/{recruitment_id}:
    get:
      tags:
        - recruitment
      summary: Gets point limit for recruitment with given id, and for all connected recruitment
      parameters:
        - in: path
          name: recruitment_id
          schema:
            type: integer
          required: true
          description: id of recruitment
      consumes:
        - application/json
      produces:
        - application/json
      responses:
        200:
          description: List of point limits
          schema:
            $ref: '#/definitions/PointLimits'
        401:
          description: user is unauthenticated
          schema:
            $ref: '#/definitions/TokenError'
        400:
          description: error during fetching point limits
          schema:
            $ref: '#/definitions/Error'
      security:
          - JWT: []
  /recruitment/{recruitment_id}:
    get:
      tags:
        - recruitment
      summary: Gets recruitment by id
      parameters:
        - in: path
          name: recruitment_id
          schema:
            type: integer
          required: true
          description: id of recruitment
      consumes:
        - application/json
      produces:
        - application/json
      responses:
        200:
          description: Recruitment data with list of candidates
          schema:
            $ref: '#/definitions/RecruitmentData'
        401:
          description: user is unauthenticated
          schema:
            $ref: '#/definitions/TokenError'
        404:
          description: recruitment not found
          schema:
            $ref: '#/definitions/Error'
        400:
          description: error during fetching data
          schema:
            $ref: '#/definitions/Error'
      security:
        - JWT: []
  /file:
    post:
      tags:
      - file
      summary: Enables editor to import file with data to the system. Accepts only csv and excel files with proper format. 
      consumes:
        - multipart/form-data
      produces:
        - application/json
      parameters:
      - in: formData
        name: data
        type: file
        description: The file to upload.
      responses:
        200:
          description: File successfully imported
          schema:
            $ref: '#/definitions/Success'
        401:
          description: user is unauthenticated
          schema:
            $ref: '#/definitions/TokenError'
        403:
          description: only editor can import files
          schema:
            $ref: '#/definitions/Error'
        400:
          description: error during file import
          schema:
            $ref: '#/definitions/Error'
      security:
          - JWT: []
  /years:
    get:
      tags:
        - recruitment
      summary: Gets a list of years (integers) in wchich recruitment happened
      consumes:
        - application/json
      produces:
        - application/json
      responses:
        200:
          description: Years successfully got
          schema:
            type: array
            items:
              type: integer
        401:
          description: user is unauthenticated
          schema:
            $ref: '#/definitions/TokenError'
      security:
        - JWT: []
  /majors:
    get:
      tags:
        - recruitment
      summary: Gets list of all majors in DB
      consumes:
        - application/json
      produces:
        - application/json
      responses:
        200:
          description: List of all fields of study
          schema:
            type: array
            items:
              $ref: '#/definitions/Major'
        401:
          description: user is unauthenticated
          schema:
            $ref: '#/definitions/TokenError'
      security:
        - JWT: []
  /origins:
    get:
      tags:
        - origins
      summary: Gets summary of candidates' origins
      consumes:
        - application/json
      produces:
        - application/json
      responses:
        200:
          description: Dictionary of Polish regions and Other
          schema:
            $ref: '#/definitions/Origins'
        401:
          description: user is unauthenticated
          schema:
            $ref: '#/definitions/TokenError'
      security:
        - JWT: []

definitions:
  CreateUserData:
    type: object
    properties:
      name:
        type: string
      email:
        description: should be unique in the system
        type: string
      password:
        type: string
      editorRequest:
        description: if set to true, editor request to admin will be send
        type: boolean
  LoginUserData:
    type: object
    properties:
      email:
        type: string
      password:
        type: string
  EditorRequest:
    type: object
    properties:
      name: 
        type: string
      email:
        type: string
  HandleEditorRequest:
    type: object
    properties:
      name:
        type: string
      email:
        type: string
      approval:
        description: either 'accept' or 'reject', accepts changes user status to editor,
          reject just removes user from RequestEditor database
        type: string
  LoginOutput:
    type: object
    properties:
      role:
        description: either 'user', 'editor' or 'admin'
        type: string
      token:
        description: Returned hashed JWT token
        type: string
  TokenError:
    type: object
    properties:
      error:
        description: what went wrong with token authentication
        type: string
  GetAllRecruitmentData:
    type: object
    properties:
      data:
        description: Array of available recruitment processes
        type: array
        items:
          type: object
          properties:
              id:
                description: The recruitment ID.
                type: integer
              major_id:
                description: The major ID.
                type: integer
              previous_recruitment_id:
                description: ID of the previous cycle recruitment. Might be null.
                type: integer
              end_date:
                description: Recruitment end date.
                type: string
              cycle_number:
                description: Number of cycles in.
                type: integer
              slot_limit:
                description: Slot limit for current recruitment.
                type: integer
              candidates_num:
                description: Number of candidates in current recruitment.
                type: integer
              point_limit:
                description: Limit of points needed.
                type: integer
              is_active:
                description: Determines whether recruitment is still open.
                type: boolean
              faculty:
                description: Faculty name.
                type: string
              degree:
                description: Degree type Bachelor/Master.
                type: string
              major_name:
                description: Major name.
                type: string
              major_mode:
                description: Major mode Part time/Full time.
                type: string
  RecruitmentData:
    type: object
    properties:
      id:
        description: The recruitment ID.
        type: integer
      major_id:
        description: The major ID.
        type: integer
      previous_recruitment_id:
          description: ID of the previous cycle recruitment. Might be null.
          type: integer
      end_date:
        description: Recruitment end date.
        type: string
      cycle_number:
        description: Number of cycles in.
        type: integer
      slot_limit:
        description: Slot limit for current recruitmenet.
        type: integer
      point_limit:
        description: Limit of points needed.
        type: integer
      is_active:
        description: Determines whether recruitment is still open.
        type: boolean
      faculty:
        description: Faculty name.
        type: string
      degree:
        description: Degree type Bachelor/Master.
        type: string
      major_name:
        description: Major name.
        type: string
      major_mode:
        description: Major mode Part time/Full time.
        type: string
      candidates:
        description: array of candidates for that recruitment
        type: array
        items:
          type: object
          properties:
            candidate_recruitment_id:
              description: The candidate recruitment ID.
              type: integer
            is_paid:
              description: Determines whether candidate paid for the recruitment
              type: boolean
            status:
              description: Status type QUALIFIED/NOT_QUALIFIED
              type: string
            points:
              description: Number of candidate points for that recruitment
              type: integer
            test_points:
              description: Optional if candidate took an entry test
              type: integer
            pesel:
              description: Candidate id
              type: string
            name:
              description: Candidate name
              type: boolean
            city:
              description: City where candidate lives
              type: string
            region:
              description: Region where candidate lives
              type: string
            country:
              description: Country where candidate lives
              type: string
            highschool:
              description: Highschool which candidate finished
              type: string
            highschool_city:
              description: Citi of candidate's highschool
              type: string
            matura_date:
              description: Date of candidate's matura exam
              type: string
            matura_points:
              description: Candidate's matura result
              type: integer
            graduation_date:
              description: Candidate's graduation date if he finished Bachelor studies
              type: string
            college_name: 
              description: Optional name of the college which candidate finished
              type: string
            faculty:
              description: Optional name of faculty that candidate finished
              type: string
            field_of_study:
              description: Field of study that candidate finished
              type: string
            mode:
              description: Mode of studies candidate finished. Either PART_TIME or FULL_TIME
              type: string
            average:
              description: Average of candidate's bachelor studies
              type: number
  Error:
    type: object
    properties:
      error:
        description: error message in polish
        type: string
  Success:
    type: object
    properties:
      message:
        description: success message in polish
        type: string
  Major:
    type: object
    properties:
      id:
        description: id of the major
        type: integer
      faculty:
        description: faculty on which the major is
        type: string
      degree:
        description: the degree of the major
        type: string
      name:
        description: name of the major
        type: string
      mode:
        description: mode of the major
        type: string
  Origins:
    type: object
    properties:
      Dolnośląskie:
        type: integer
      Kujawsko-pomorskie:
        type: integer
      Lubelskie:
        type: integer
      Lubuskie:
        type: integer
      Łódzkie:
        type: integer
      Małopolskie:
        type: integer
      Mazowieckie:
        type: integer
      Opolskie:
        type: integer
      Podkarpackie:
        type: integer
      Podlaskie:
        type: integer
      Pomorskie:
        type: integer
      Śląskie:
        type: integer
      Świętokrzyskie:
        type: integer
      Warmińsko-mazurskie:
        type: integer
      Wielkopolskie:
        type: integer
      Zachodniopomorskie:
        type: integer
      Inne:
        type: integer
  PointLimits:
    type: array
    description: array of point limits with cycle number
    items:
      type: object
      properties:
        cycle_number:
          type: integer
          description: cycle number of recruitment
        point_limit:
          type: integer
          description: point limit of recruitment
