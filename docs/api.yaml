swagger: "2.0"
info:
  title: RECIO API
  version: 1.0.0
host: 127.0.0.1:5000
tags:
- name: user
  description: Operations about user
schemes:
  - http
securityDefinitions:
  JWT:
    type: apiKey
    in: header
    name: token
paths:
  /:
    get:
      summary: base route
      consumes:
        - application/json
      produces:
        - application/json
      responses:
        200:
          description: app name
  # example
  /user:
    post:
      tags:
      - user
      summary: Enables user to create account in our system
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
      - in: body
        name: body
        description: User data that is needed to create user account in our system
        required: true
        schema:
          $ref: '#/definitions/CreateUserData'
      responses:
        200:
          description: user account created
        400:
          description: invalid data supplied (at least one item in response)
          schema:
            $ref: '#/definitions/InvalidRegisterInput'
        409:
          description: given email is already taken
          schema:
            $ref: '#/definitions/ErrorMessage'
  /user/auth:
    post:
      tags:
      - user
      summary: Logs user into the system
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
      - in: body
        name: body
        description: Data that is needed to authenticate user
        required: true
        schema:
          $ref: '#/definitions/LoginUserData'
      responses:
        200:
          description: authenticated
          schema:
            $ref: '#/definitions/LoginOutput'
        400:
          description: invalid email or password
          schema:
            $ref: '#/definitions/ErrorMessage'
  /user/editorRequests:
    get:
      tags:
      - user
      summary: Returns editor requests made by users. Available only for admin. Needs 'token' field in headers.
      consumes:
        - application/json
      produces:
        - application/json
      responses:
        200:
          description: editor requests fetched
          schema:
            type: array
            items:
              $ref: '#/definitions/EditorRequest'
        401:
          description: user is unauthenticated
          schema:
            $ref: '#/definitions/TokenError'
        403:
          description: only admin have access to that
          schema:
            $ref: '#/definitions/ErrorMessage'
      security:
        - JWT: []
    post:
      tags:
        - user
      summary: If approval is 'accept' changes role from 'user' to 'editor'.
        If approval is 'reject' simply removes the EditorRequest of the user from DB.
        Needs 'token' field in headers.
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: body
          description: Data that is needed to authenticate user
          required: true
          schema:
            $ref: '#/definitions/HandleEditorRequest'
      responses:
        200:
          description: Role changed to editor
        401:
          description: user is unauthenticated
          schema:
            $ref: '#/definitions/TokenError'
        403:
          description: only admin have access to that
          schema:
            $ref: '#/definitions/ErrorMessage'
        409:
          description: invalid user information or approval status
          schema:
            $ref: '#/definitions/ErrorMessage'
      security:
          - JWT: []
  /recruitment:
    get:
      tags:
        - recruitment
      summary: Returns all recruitments available in application.
      consumes:
        - application/json
      produces:
        - application/json
      responses:
        200:
          description: <h3> Collects all available recruitment data from database </h4>
          schema:
            $ref: '#/definitions/GetAllRecruitmentData'
      security:
        - JWT: []

definitions:
  CreateUserData:
    type: object
    properties:
      name:
        type: string
      email:
        description: should be unique in the system
        type: string
      password:
        type: string
      editorRequest:
        description: if set to true, editor request to admin will be send
        type: boolean
  LoginUserData:
    type: object
    properties:
      email:
        type: string
      password:
        type: string
  EditorRequest:
    type: object
    properties:
      name: 
        type: string
      email:
        type: string
  HandleEditorRequest:
    type: object
    properties:
      name:
        type: string
      email:
        type: string
      approval:
        description: either 'accept' or 'reject', accepts changes user status to editor,
          reject just removes user from RequestEditor database
        type: string
  LoginOutput:
    type: object
    properties:
      role:
        description: either 'user', 'editor' or 'admin'
        type: string
      token:
        description: Returned hashed JWT token
        type: string
  InvalidRegisterInput:
    type: object
    properties:
      name:
        description: provided name is invalid (optional)
        type: string
      email:
        description: provided email is invalid (optional)
        type: string
      password:
        description: provided password is invalid (optional)
        type: string
      error:
        description: what went wrong with registration
        type: string
  TokenError:
    type: object
    properties:
      error:
        desciption: what went wrong with token authentication
        type: string
  ErrorMessage:
    type: object
    properties:
      error:
        description: error containing message of what went wrong
        type: string
  GetAllRecruitmentData:
    type: object
    properties:
      data:
        description: Array of available recruitment processes
        type: array
        items:
          type: object
          properties:
              id:
                description: The recruitment ID.
                type: integer
              major_id:
                description: The major ID.
                type: integer
              end_date:
                description: Recruitment end date.
                type: string
              cycle_number:
                description: Number of cycles in.
                type: integer
              slot_limit:
                description: Slot limit for current recruitmenet.
                type: integer
              point_limit:
                description: Limit of points needed.
                type: integer
              is_active:
                description: Determines whether recruitment is still open.
                type: boolean
              faculty:
                description: Faculty name.
                type: string
              degree:
                description: Degree type Bachelor/Master.
                type: string
              major_name:
                description: Major name.
                type: string
              major_mode:
                description: Major mode Part time/Full time.
                type: string